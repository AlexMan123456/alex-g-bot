generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id     String           @id
  username    String           @db.VarChar(100)
  global_name String           @db.VarChar(100)
  bot_user    Boolean
  date_of_birth DateTime?
  punishments Punishments[]
  suggestions Suggestion[]
  guilds      UsersAndGuilds[]
  items       UsersAndItems[]

  @@map("users")
}

model Suggestion {
  suggestion_id String           @id
  user_id       String
  title         String           @db.VarChar(100)
  description   String
  status        SuggestionStatus @default(pending)
  author        User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("suggestions")
}

model Guild {
  guild_id               String           @id
  name                   String
  leave_message          String           @default("{user} has left {guild}")
  welcome_message        String           @default("{user} has joined {guild}")
  suggestions_channel_id String?
  mod_role_id            String?
  leave_channel_id       String?
  welcome_channel_id     String?
  error_log_id           String?
  currency_symbol        String           @default("Â£")
  items                  Items[]
  punishments            Punishments[]
  users                  UsersAndGuilds[]

  @@map("guilds")
}

model UsersAndGuilds {
  user_id           String
  guild_id          String
  joined_at         DateTime
  money_current     Int?               @default(100)
  money_savings     Int?               @default(0)
  command_cooldowns CommandCooldowns[]
  guild             Guild              @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)
  user              User               @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, guild_id])
  @@map("users_and_guilds")
}

model CommandCooldowns {
  user_id         String
  guild_id        String
  name            String
  cooldown_expiry DateTime
  command_id      Int            @id @default(autoincrement())
  user_in_guild   UsersAndGuilds @relation(fields: [user_id, guild_id], references: [user_id, guild_id])

  @@map("command_cooldowns")
}

model Items {
  item_id     Int             @id @default(autoincrement())
  guild_id    String
  name        String
  description String?
  stock       Int?
  price       Int
  guild       Guild           @relation(fields: [guild_id], references: [guild_id])
  users       UsersAndItems[]

  @@map("items")
}

model UsersAndItems {
  user_id String
  item_id Int
  item    Items  @relation(fields: [item_id], references: [item_id])
  user    User   @relation(fields: [user_id], references: [user_id])

  @@id([user_id, item_id])
  @@map("users_and_items")
}

model Punishments {
  punishment_id Int            @id @default(autoincrement())
  type          PunishmentType
  user_id       String
  guild_id      String
  reason        String?
  guild         Guild          @relation(fields: [guild_id], references: [guild_id])
  user          User           @relation(fields: [user_id], references: [user_id])

  @@map("punishments")
}

enum PunishmentType {
  warn
  kick
  ban
}

enum SuggestionStatus {
  pending
  resolved
  rejected
}
